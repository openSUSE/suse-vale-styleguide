text := import("text")

matches := []
pattern := `(?s)<screen.*?>(.*?)</screen>`

// Find all <screen> blocks and their positions
screens := text.re_find(pattern, scope, -1)

for screen in screens {
    if len(screen) < 1 {
        continue
    }

    content := screen[0]["text"]  // Extract the content inside <screen>
    screen_start := screen[0]["begin"]  // Start position of <screen> block

    // Remove Docbook markup
    cleaned_content := text.re_replace(`<[^>]+>`, content, "")

    // Split content into lines
    lines := text.re_split("\n", cleaned_content, -1)
    offset := screen_start

    for line in lines {
        // Find the exact position of the line in the original scope
        line_matches := text.re_find(line, scope, -1)
        if len(line_matches) == 0 {
            continue  // Skip if the line is not found
        }

        line_start := line_matches[0][0]["begin"]  // Get the start index of the line
        line_end := line_start + len(line)  // Calculate the end index

        if len(line) > 80 {  // Check if the line length is greater than 80
            matches = append(matches, { "begin": line_start, "end": line_end })
        }

        offset = line_end  // Move offset forward
    }
}
